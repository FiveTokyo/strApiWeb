/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChefListResponse,
  ChefRequest,
  ChefResponse,
} from '../models';
import {
    ChefListResponseFromJSON,
    ChefListResponseToJSON,
    ChefRequestFromJSON,
    ChefRequestToJSON,
    ChefResponseFromJSON,
    ChefResponseToJSON,
} from '../models';

export interface DeleteChefsIdRequest {
    id: string;
}

export interface GetChefsRequest {
    sort?: string;
    paginationWithCount?: boolean;
    paginationPage?: number;
    paginationPageSize?: number;
    paginationStart?: number;
    paginationLimit?: number;
    fields?: string;
    populate?: string;
}

export interface GetChefsIdRequest {
    id: string;
}

export interface PostChefsRequest {
    chefRequest: ChefRequest;
}

export interface PutChefsIdRequest {
    id: string;
    chefRequest: ChefRequest;
}

/**
 * 
 */
export class ChefApi extends runtime.BaseAPI {

    /**
     */
    async deleteChefsIdRaw(requestParameters: DeleteChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteChefsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chefs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async deleteChefsId(requestParameters: DeleteChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.deleteChefsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChefsRaw(requestParameters: GetChefsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChefListResponse>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.paginationWithCount !== undefined) {
            queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
        }

        if (requestParameters.paginationPage !== undefined) {
            queryParameters['pagination[page]'] = requestParameters.paginationPage;
        }

        if (requestParameters.paginationPageSize !== undefined) {
            queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
        }

        if (requestParameters.paginationStart !== undefined) {
            queryParameters['pagination[start]'] = requestParameters.paginationStart;
        }

        if (requestParameters.paginationLimit !== undefined) {
            queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.populate !== undefined) {
            queryParameters['populate'] = requestParameters.populate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        console.log('queryParameters:', queryParameters)
        const response = await this.request({
            path: `/chefs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChefListResponseFromJSON(jsonValue));
    }

    /**
     */
    async getChefs(requestParameters: GetChefsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChefListResponse> {
        const response = await this.getChefsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChefsIdRaw(requestParameters: GetChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChefResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChefsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chefs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChefResponseFromJSON(jsonValue));
    }

    /**
     */
    async getChefsId(requestParameters: GetChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChefResponse> {
        const response = await this.getChefsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postChefsRaw(requestParameters: PostChefsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChefResponse>> {
        if (requestParameters.chefRequest === null || requestParameters.chefRequest === undefined) {
            throw new runtime.RequiredError('chefRequest','Required parameter requestParameters.chefRequest was null or undefined when calling postChefs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chefs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChefRequestToJSON(requestParameters.chefRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChefResponseFromJSON(jsonValue));
    }

    /**
     */
    async postChefs(requestParameters: PostChefsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChefResponse> {
        const response = await this.postChefsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putChefsIdRaw(requestParameters: PutChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChefResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putChefsId.');
        }

        if (requestParameters.chefRequest === null || requestParameters.chefRequest === undefined) {
            throw new runtime.RequiredError('chefRequest','Required parameter requestParameters.chefRequest was null or undefined when calling putChefsId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/chefs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChefRequestToJSON(requestParameters.chefRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChefResponseFromJSON(jsonValue));
    }

    /**
     */
    async putChefsId(requestParameters: PutChefsIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChefResponse> {
        const response = await this.putChefsIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
