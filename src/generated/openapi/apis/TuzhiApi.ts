/* tslint:disable */
/* eslint-disable */
/**
 * test
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthLocalPost200Response,
  ChefsGet200Response,
  UNKNOWN_BASE_TYPE,
} from '../models';
import {
    AuthLocalPost200ResponseFromJSON,
    AuthLocalPost200ResponseToJSON,
    ChefsGet200ResponseFromJSON,
    ChefsGet200ResponseToJSON,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface AuthLocalPostRequest {
    uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE;
}

export interface ChefsGetRequest {
    sort?: string;
    paginationWithCount?: string;
    paginationPage?: string;
    paginationPageSize?: string;
    paginationStart?: string;
    paginationLimit?: string;
    fields?: string;
    populate?: string;
}

/**
 * 
 */
export class TuzhiApi extends runtime.BaseAPI {

    /**
     * 
     * login
     */
    async authLocalPostRaw(requestParameters: AuthLocalPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLocalPost200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/local`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.uNKNOWNBASETYPE),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLocalPost200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * login
     */
    async authLocalPost(requestParameters: AuthLocalPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLocalPost200Response> {
        const response = await this.authLocalPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * chefs
     */
    async chefsGetRaw(requestParameters: ChefsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChefsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.paginationWithCount !== undefined) {
            queryParameters['pagination[withCount]'] = requestParameters.paginationWithCount;
        }

        if (requestParameters.paginationPage !== undefined) {
            queryParameters['pagination[page]'] = requestParameters.paginationPage;
        }

        if (requestParameters.paginationPageSize !== undefined) {
            queryParameters['pagination[pageSize]'] = requestParameters.paginationPageSize;
        }

        if (requestParameters.paginationStart !== undefined) {
            queryParameters['pagination[start]'] = requestParameters.paginationStart;
        }

        if (requestParameters.paginationLimit !== undefined) {
            queryParameters['pagination[limit]'] = requestParameters.paginationLimit;
        }

        if (requestParameters.fields !== undefined) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.populate !== undefined) {
            queryParameters['populate'] = requestParameters.populate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chefs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChefsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     * chefs
     */
    async chefsGet(requestParameters: ChefsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChefsGet200Response> {
        const response = await this.chefsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
